#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include <Servo.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *motorM1 = AFMS.getMotor(1);
Adafruit_DCMotor *motorM2 = AFMS.getMotor(2);
Servo servo1;

RF24 radio(9, 8); // CE, CSN

const byte address[6] = "JAMES"; // Address to communicate with the other RF module

const int forwardButtonPin = 6;
const int leftButtonPin = 7;
const int rightButtonPin = 5;

void setup() {
  Serial.begin(9600);
  AFMS.begin();
  motorM1->setSpeed(120);
  motorM2->setSpeed(105);



  pinMode(forwardButtonPin, INPUT_PULLUP);
  pinMode(leftButtonPin, INPUT_PULLUP);
  pinMode(rightButtonPin, INPUT_PULLUP);

  radio.begin();
  radio.openReadingPipe(1, address);
  radio.startListening();
}

void moveForward() {
  Serial.println("Moving forward");
  motorM1->run(FORWARD);
  motorM2->run(FORWARD);
}

void stopMotors() {
  Serial.println("Stopping motors");
  motorM1->run(RELEASE);
  motorM2->run(RELEASE);
}

void leftTurn() {
  Serial.println("Turning left");
  motorM1->setSpeed(82);
  motorM2->setSpeed(73);
  motorM1->run(BACKWARD);
  motorM2->run(FORWARD);
  delay(500);
  motorM1->setSpeed(120);
  motorM2->setSpeed(111);
  stopMotors();
}

void rightTurn() {
  Serial.println("Turning right");
  motorM1->setSpeed(82);
  motorM2->setSpeed(73);
  motorM1->run(FORWARD);
  motorM2->run(BACKWARD);
  delay(500);
  motorM1->setSpeed(120);
  motorM2->setSpeed(111);
  stopMotors();
}

void loop() {
  if (radio.available()) {
    int command;
    radio.read(&command, sizeof(command));

    // Execute command received from RF module
    switch (command) {
      case 1: // Forward
        moveForward();
        break;
      case 2: // Left
        leftTurn();
        delay(1000); // Adjust delay as needed
        break;
      case 3: // Right
        rightTurn();
        delay(1000); // Adjust delay as needed
        break;
      default:
        stopMotors();
        break;
    }
  }

  // Check forward button state
  if (digitalRead(forwardButtonPin) == LOW) {
    moveForward();
  } else {
    stopMotors();
  }

  // Check left button state
  if (digitalRead(leftButtonPin) == LOW) {
    leftTurn();
    delay(1000); // Adjust delay as needed
  }

  // Check right button state
  if (digitalRead(rightButtonPin) == LOW) {
    rightTurn();
    delay(1000); // Adjust delay as needed
  }
}
